<div class="article_content tracking-ad" data-dsm="post" data-mod="popu_307" id="article_content">
<div class="markdown_views"><h1 id="环境">环境</h1>
<p>hadoop   2.7.0 <br>
hbase     1.2.1 <br>
Thrift      0.9.0</br></br></p>
<h1 id="启动hbase的thrift-rpc">启动hbase的Thrift RPC</h1>
<pre class="prettyprint"><code class=" hljs sql">./hbase-daemon.sh <span class="hljs-operator"><span class="hljs-keyword">start</span> thrift</span></code></pre>
<h1 id="生成python的thrift模块">生成python的Thrift模块</h1>
<pre class="prettyprint"><code class=" hljs avrasm">cd hbase-<span class="hljs-number">1.2</span><span class="hljs-number">.1</span>/hbase-thrift/src/main/resources/org/apache/hadoop/hbase/thrift
thrift --gen py Hbase<span class="hljs-preprocessor">.thrift</span>

<span class="hljs-preprocessor">#生成gen-py文件</span>
.
├── gen-py
│   ├── hbase
│   │   ├── constants<span class="hljs-preprocessor">.py</span>
│   │   ├── Hbase<span class="hljs-preprocessor">.py</span>
│   │   ├── Hbase-remote
│   │   ├── __init__<span class="hljs-preprocessor">.py</span>
│   │   └── ttypes<span class="hljs-preprocessor">.py</span>
│   └── __init__<span class="hljs-preprocessor">.py</span>
└── Hbase<span class="hljs-preprocessor">.thrift</span>
<span class="hljs-preprocessor">#把gen-py/hbase复制到项目下</span></code></pre>
<pre class="prettyprint"><code class=" hljs avrasm">.
├── hbase
│   ├── constants<span class="hljs-preprocessor">.py</span>
│   ├── Hbase<span class="hljs-preprocessor">.py</span>
│   ├── Hbase<span class="hljs-preprocessor">.pyc</span>
│   ├── Hbase-remote
│   ├── __init__<span class="hljs-preprocessor">.py</span>
│   ├── __init__<span class="hljs-preprocessor">.pyc</span>
│   ├── ttypes<span class="hljs-preprocessor">.py</span>
│   └── ttypes<span class="hljs-preprocessor">.pyc</span>
└── hbase_client<span class="hljs-preprocessor">.py</span>
</code></pre>
<p><strong>hbase_client.py</strong></p>
<pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment"># # -*- coding: utf-8 -*-</span>

<span class="hljs-keyword">from</span> thrift.transport <span class="hljs-keyword">import</span> TSocket
<span class="hljs-keyword">from</span> thrift.transport <span class="hljs-keyword">import</span> TTransport
<span class="hljs-keyword">from</span> thrift.protocol <span class="hljs-keyword">import</span> TBinaryProtocol

<span class="hljs-keyword">from</span> hbase <span class="hljs-keyword">import</span> Hbase
<span class="hljs-keyword">from</span> hbase.ttypes <span class="hljs-keyword">import</span> ColumnDescriptor, Mutation


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HbaseClient</span><span class="hljs-params">(object)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">9090</span>)</span>:</span>
        transport = TTransport.TBufferedTransport(TSocket.TSocket(host, port))
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Hbase.Client(protocol)
        transport.open()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_tables</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""
        获取所有表
        """</span>
        <span class="hljs-keyword">return</span> self.client.getTableNames()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_table</span><span class="hljs-params">(self, table, *columns)</span>:</span>
        <span class="hljs-string">"""
        创建表
        """</span>
        self.client.createTable(table, map(<span class="hljs-keyword">lambda</span> column: ColumnDescriptor(column), columns))

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">put</span><span class="hljs-params">(self, table, row, columns, attributes=None)</span>:</span>
        <span class="hljs-string">"""
        添加记录
        @:param columns {"k:1":"11"}
        """</span>
        self.client.mutateRow(table, row, map(<span class="hljs-keyword">lambda</span> (k,v): Mutation(column=k, value=v), columns.items()), attributes)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scan</span><span class="hljs-params">(self, table, start_row=<span class="hljs-string">""</span>, columns=None, attributes=None)</span>:</span>
        <span class="hljs-string">"""
        获取记录
        """</span>

        scanner = self.client.scannerOpen(table, start_row, columns, attributes)
        <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
            r = self.client.scannerGet(scanner)
            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> r:
                <span class="hljs-keyword">break</span>
            <span class="hljs-keyword">yield</span> dict(map(<span class="hljs-keyword">lambda</span> (k, v): (k, v.value),r[<span class="hljs-number">0</span>].columns.items()))

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:
    client = HbaseClient(<span class="hljs-string">"192.168.19.74"</span>, <span class="hljs-number">9090</span>)
    client.create_table(<span class="hljs-string">"student"</span>, <span class="hljs-string">"name"</span>, <span class="hljs-string">"coruse"</span>)
    print(client.get_tables())
    client.put(<span class="hljs-string">"student"</span>, <span class="hljs-string">"1"</span>, {<span class="hljs-string">"name:"</span>:<span class="hljs-string">"zhangsan"</span>, <span class="hljs-string">"coruse:art"</span>: <span class="hljs-string">"88"</span>, <span class="hljs-string">"coruse:math"</span>: <span class="hljs-string">"12"</span>})
    client.put(<span class="hljs-string">"student"</span>, <span class="hljs-string">"2"</span>, {<span class="hljs-string">"name:"</span>:<span class="hljs-string">"lisi"</span>, <span class="hljs-string">"coruse:art"</span>: <span class="hljs-string">"90"</span>, <span class="hljs-string">"coruse:math"</span>: <span class="hljs-string">"100"</span>})
    client.put(<span class="hljs-string">"student"</span>, <span class="hljs-string">"3"</span>, {<span class="hljs-string">"name:"</span>:<span class="hljs-string">"lisi2"</span>})
    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> client.scan(<span class="hljs-string">"student"</span>, columns=[<span class="hljs-string">"name"</span>]):
        print(v)
    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> client.scan(<span class="hljs-string">"student"</span>):
        print(v)
</code></pre></div>

</div>