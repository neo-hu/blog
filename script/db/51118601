<div class="article_content tracking-ad" data-dsm="post" data-mod="popu_307" id="article_content">
<div class="markdown_views"><p>以前一直用git同步代码到服务器，这种方法一台机器还行，如果多台机器就不急麻烦了，后来用<a href="http://blog.csdn.net/u010066807/article/details/50659832">pssh</a>处理多台，也不方便 <br>
后来发现了<a href="http://docs.fabfile.org/en/latest/index.html">Fabric</a>，发现这个东西部署起来简直太爽了</br></p>
<h1 id="创建一下脚本fabfilepy">创建一下脚本<code>fabfile.py</code></h1>
<pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment">#!/usr/bin/env python</span>
<span class="hljs-comment"># encoding: utf-8</span>
<span class="hljs-keyword">import</span> os

<span class="hljs-keyword">from</span> fabric.api <span class="hljs-keyword">import</span> settings, cd, run, env

<span class="hljs-comment">#需要部署的机器，都是免密码登录的</span>
env.hosts = [<span class="hljs-string">'root@RealserverNet1'</span>, <span class="hljs-string">'root@RealserverNet2'</span>]
<span class="hljs-comment">#如果需要输入密码</span>
<span class="hljs-comment">#env.password = 'pwd'</span>

project = <span class="hljs-string">"my_flask"</span>
project_path = os.path.join(<span class="hljs-string">"/var/www"</span>, project)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clone</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""
    clone项目
    """</span>
    <span class="hljs-keyword">with</span> cd(<span class="hljs-string">"/var/www"</span>):
        run(<span class="hljs-string">"rm -fr %s"</span> % project)
        run(<span class="hljs-string">"sudo -u www-data git clone git@10.10.100.52:/home/git/%s"</span> % project)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pull</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""
    更新代码
    """</span>
    <span class="hljs-keyword">with</span> cd(project_path):
        run(<span class="hljs-string">"sudo -u www-data git pull"</span>)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">uwsgi_init</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""
    初始化uwsgi
    """</span>
    <span class="hljs-keyword">with</span> settings(warn_only=<span class="hljs-keyword">True</span>):
        run(<span class="hljs-string">"uwsgi --stop /tmp/%s.pid"</span>%project)
    run(<span class="hljs-string">"sleep 1"</span>)
    run(<span class="hljs-string">"sudo -u www-data uwsgi --ini %s"</span>%(os.path.join(project_path, <span class="hljs-string">"uwsgi.ini"</span>)))
    run(<span class="hljs-string">"sleep 1"</span>)
    run(<span class="hljs-string">"ps -aux|grep %s||grep -v grep"</span>%(os.path.join(project_path, <span class="hljs-string">"uwsgi.ini"</span>)))

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">uwsgi_reload</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""
    更新代码并且重新加载uwsgi
    """</span>
    run(<span class="hljs-string">"sudo -u www-data uwsgi --reload /tmp/%s.pid"</span>%project)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""
    更新代码并且重新加载uwsgi
    """</span>
    pull()
    uwsgi_reload()</code></pre>
<h1 id="执行">执行</h1>
<pre class="prettyprint"><code class=" hljs php">fab <span class="hljs-keyword">clone</span> 
fab uwsgi_init</code></pre>
<p>每台机器上都克隆并且启动服务了</p>
<blockquote>
<p>脚本默认为<strong>fabfile.py</strong>， 如果修改脚本名 必须加-f参数  <br>
  fab -f a1.py clone</br></p>
</blockquote>
<h2 id="每次代码提交后更新">每次代码提交后更新</h2>
<pre class="prettyprint"><code class=" hljs sql">fab <span class="hljs-operator"><span class="hljs-keyword">update</span> </span></code></pre>
<blockquote>
<p>Fabric最常用的是local()和run()，分别在本地和远程执行命令，put()可以把本地文件上传到远程，当需要在远程指定当前目录时，只需用with cd(‘/path/to/dir/’):即可。</p>
<p>默认情况下，当命令执行失败时，Fabric会停止执行后续命令。有时，我们允许忽略失败的命令继续执行， <br>
  比如run(“uwsgi –stop /tmp/%s.pid”%project) 在pid文件不存在的时候有可能失败，这时可以用with settings(warn_only=True):执行命令，这样Fabric只会打出警告信息而不会中断执行。</br></p>
</blockquote></div>

</div>