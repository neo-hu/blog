<div class="article_content tracking-ad" data-dsm="post" data-mod="popu_307" id="article_content">
<div class="markdown_views"><h1 id="nginxconf文件配置">nginx.conf文件配置</h1>
<pre class="prettyprint"><code class=" hljs d">worker_processes <span class="hljs-keyword">auto</span>; 
worker_rlimit_nofile <span class="hljs-number">100000</span></code></pre>
<blockquote>
<p>worker_processes 定义了nginx对外提供web服务时的worker进程数。最优值取决于许多因素，包括（但不限于）CPU核的数量、存储数据的硬盘数量及负载模式。不能确定的时候，将其设置为可用的CPU内核数将是一个好的开始（设置为“auto”将尝试自动检测它）。 <br>
  worker_rlimit_nofile 更改worker进程的最大打开文件数限制。</br></p>
</blockquote>
<h2 id="events模块">Events模块</h2>
<p><strong>events模块中包含nginx中所有处理连接的设置。</strong></p>
<p>events {  <br>
worker_connections 3000;  <br>
multi_accept on;  <br>
use epoll;  <br>
} </br></br></br></br></p>
<blockquote>
<p>worker_connections 设置可由一个worker进程同时打开的最大连接数 <br>
  multi_accept 告诉nginx收到一个新连接通知后接受尽可能多的连接。 <br>
  use 设置用于复用客户端线程的轮询方法。如果你使用Linux 2.6+，你应该使用epoll。</br></br></p>
</blockquote>
<h1 id="http模块">http模块</h1>
<pre class="prettyprint"><code class=" hljs applescript">gzip <span class="hljs-function_start"><span class="hljs-keyword">on</span></span>;<span class="hljs-comment">#是告诉nginx采用gzip压缩的形式发送数据。这将会减少我们发送的数据量。</span>
gzip_disable <span class="hljs-string">"msie6"</span>; 指定的客户端禁用gzip功能。我们设置成IE6或者更低版本。
gzip_comp_level <span class="hljs-number">4</span>; <span class="hljs-comment">#设置数据的压缩等级。1-9之间的任意数值，9是最慢但是压缩比最大的。我设置为4。</span>
gzip_min_length <span class="hljs-number">1</span>k;<span class="hljs-comment">#默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。</span>
access_log off;  <span class="hljs-comment">#access_log 设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快</span>
error_log /var/<span class="hljs-command">log</span>/nginx/<span class="hljs-keyword">error</span>.<span class="hljs-command">log</span> ;  <span class="hljs-comment">#告诉nginx只能记录严重的错误：</span>
</code></pre></div>

</div>